name: Release Branch Check

on:
  pull_request:
    branches:
      - 'release/**'
      - 'main'
    types: [opened, synchronize, reopened]

env:
  RELEASE_BRANCH_PREFIX: 'release/'
  CURRENT_RELEASE: 'v2'

jobs:
  validate-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_LABELS=${{ github.event.pull_request.labels.*.name }}" >> $GITHUB_ENV
          echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Validate release branch
        run: |
          # First check if it's a release branch
          if [[ ! "$TARGET_BRANCH" =~ ^${{ env.RELEASE_BRANCH_PREFIX }} ]]; then
            # Not a release branch, no need for release validation
            exit 0
          fi
          
          # Check if PR has release label
          if [[ ! "$PR_LABELS" =~ "release" ]]; then
            echo "::error::PRs targeting release branches must have the 'release' label"
            exit 1
          fi
          
          # Extract version from branch name (e.g., v2 from release/v2)
          BRANCH_VERSION=$(echo "$TARGET_BRANCH" | sed "s|${{ env.RELEASE_BRANCH_PREFIX }}||")
          
          # Check if trying to merge to an older release branch
          if [[ "$BRANCH_VERSION" != "${{ env.CURRENT_RELEASE }}" ]]; then
            # Check for special label that allows merging to older releases
            if ! [[ "$PR_LABELS" =~ "allow-older-release" ]]; then
              echo "::error::Merging to older release branches (release/$BRANCH_VERSION) is not allowed. Current release is ${{ env.CURRENT_RELEASE }}."
              echo "::error::If this is intentional, add the 'allow-older-release' label to the PR."
              exit 1
            fi
          fi
          
          # Additional validation for release PRs
          # Check if PR title follows release format
          if ! [[ "$PR_TITLE" =~ ^Release\ \[[0-9]{4}-[0-9]{2}-[0-9]{2}\]$ ]]; then
            echo "::error::Release PR title must follow format: 'Release [YYYY-MM-DD]'"
            exit 1
          fi
          
          # Check if CHANGELOG.md has been updated
          if ! git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep -q "CHANGELOG.md"; then
            echo "::error::CHANGELOG.md must be updated for releases"
            exit 1
          fi 