{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Apollo MCP Server Configuration",
  "description": "JSON schema for Apollo MCP Server YAML configuration files",
  "type": "object",
  "properties": {
    "endpoint": {
      "type": "string",
      "format": "uri",
      "default": "http://localhost:4000/",
      "description": "Target GraphQL endpoint URL",
      "examples": [
        "http://localhost:4000/",
        "https://api.example.com/graphql",
        "https://studio.apollographql.com/sandbox/explorer"
      ],
      "pattern": "^https?://"
    },
    "graphos": {
      "type": "object",
      "description": "Apollo GraphOS credential overrides",
      "properties": {
        "apollo_key": {
          "type": "string",
          "description": "Apollo GraphOS API key (can use ${APOLLO_KEY} env var)"
        },
        "apollo_graph_ref": {
          "type": "string",
          "description": "GraphOS graph reference (can use ${APOLLO_GRAPH_REF} env var, e.g., my-graph@current)"
        },
        "apollo_registry_url": {
          "type": "string",
          "format": "uri",
          "description": "Apollo registry URL override"
        },
        "apollo_uplink_endpoints": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          },
          "description": "Uplink URL overrides"
        }
      },
      "additionalProperties": false
    },
    "transport": {
      "type": "object",
      "description": "Server transport configuration",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["stdio", "streamable_http", "sse"],
          "default": "stdio",
          "description": "Transport method - stdio for process communication, streamable_http for HTTP streaming, sse for Server-Sent Events",
          "x-intellisense": {
            "enumDescriptions": [
              "Standard I/O - for process communication",
              "HTTP streaming - for web-based clients",
              "Server-Sent Events - for real-time updates"
            ]
          }
        },
        "address": {
          "type": "string",
          "default": "127.0.0.1",
          "description": "IP address to bind (for HTTP/SSE transports)"
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "default": 5000,
          "description": "Port to bind (for HTTP/SSE transports)"
        },
        "auth": {
          "type": "object",
          "description": "Authentication settings for HTTP transport",
          "properties": {
            "servers": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              },
              "description": "Upstream OAuth server URLs"
            },
            "audiences": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Accepted JWT audiences (aud claims)"
            },
            "resource": {
              "type": "string",
              "format": "uri",
              "description": "Externally available server URL"
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Queryable OAuth scopes"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "cors": {
      "type": "object",
      "description": "CORS configuration for HTTP transport",
      "properties": {
        "origin": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Allowed origins for CORS requests"
        },
        "credentials": {
          "type": "boolean",
          "description": "Allow credentials in CORS requests"
        }
      },
      "additionalProperties": false
    },
    "headers": {
      "type": "object",
      "description": "Hard-coded headers sent with GraphQL requests",
      "additionalProperties": {
        "type": "string"
      },
      "examples": [
        {
          "Authorization": "Bearer ${AUTH_TOKEN}",
          "X-API-Key": "${API_KEY}"
        }
      ]
    },
    "operations": {
      "type": "object",
      "description": "Operations configuration",
      "properties": {
        "source": {
          "type": "string",
          "enum": ["introspection", "manifest", "studio"],
          "description": "Source for GraphQL operations"
        },
        "manifest": {
          "type": "string",
          "description": "Path to manifest file when source is 'manifest'"
        }
      },
      "additionalProperties": false
    },
    "schema": {
      "type": "object",
      "description": "Schema configuration",
      "properties": {
        "source": {
          "type": "string",
          "enum": ["introspection", "file", "studio"],
          "description": "Source for GraphQL schema"
        },
        "file": {
          "type": "string",
          "description": "Path to schema file when source is 'file'"
        }
      },
      "additionalProperties": false
    },
    "introspection": {
      "type": "object",
      "description": "Introspection configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable schema introspection"
        },
        "cache_ttl": {
          "type": "integer",
          "description": "Cache TTL in seconds"
        }
      },
      "additionalProperties": false
    },
    "overrides": {
      "type": "object",
      "description": "Server behavior overrides",
      "properties": {
        "mutation_mode": {
          "type": "string",
          "enum": ["all", "none", "safe"],
          "default": "safe",
          "description": "Controls which GraphQL mutations are exposed as MCP tools"
        },
        "max_query_depth": {
          "type": "integer",
          "description": "Maximum query depth allowed"
        }
      },
      "additionalProperties": false
    },
    "logging": {
      "type": "object",
      "description": "Logging configuration",
      "properties": {
        "level": {
          "type": "string",
          "enum": ["error", "warn", "info", "debug", "trace"],
          "default": "info",
          "description": "Log level"
        },
        "format": {
          "type": "string",
          "enum": ["json", "text"],
          "default": "text",
          "description": "Log output format"
        }
      },
      "additionalProperties": false
    },
    "health_check": {
      "type": "object",
      "description": "Health check endpoint configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable health check endpoint"
        },
        "path": {
          "type": "string",
          "default": "/health",
          "description": "Health check endpoint path"
        }
      },
      "additionalProperties": false
    },
    "custom_scalars": {
      "type": "string",
      "description": "Path to custom scalar map file"
    },
    "telemetry": {
      "type": "object",
      "description": "Metrics and trace export configuration",
      "properties": {
        "service_name": {
          "type": "string",
          "description": "Service name in telemetry data"
        },
        "version": {
          "type": "string",
          "description": "Service version in telemetry data"
        },
        "exporters": {
          "type": "object",
          "properties": {
            "metrics": {
              "type": "object",
              "description": "Metrics export configuration"
            },
            "tracing": {
              "type": "object",
              "description": "Trace export configuration"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "endpoint": "http://localhost:4000/",
      "transport": {
        "type": "stdio"
      }
    },
    {
      "endpoint": "https://api.example.com/graphql",
      "graphos": {
        "apollo_key": "${APOLLO_KEY}",
        "apollo_graph_ref": "${APOLLO_GRAPH_REF}"
      },
      "transport": {
        "type": "streamable_http",
        "port": 5000,
        "auth": {
          "servers": ["https://auth.example.com"],
          "audiences": ["api.example.com"],
          "scopes": ["read:data", "write:data"]
        }
      },
      "headers": {
        "Authorization": "Bearer ${GRAPHQL_TOKEN}"
      },
      "cors": {
        "origin": ["http://localhost:3000", "https://app.example.com"],
        "credentials": true
      },
      "logging": {
        "level": "debug",
        "format": "json"
      }
    }
  ]
}