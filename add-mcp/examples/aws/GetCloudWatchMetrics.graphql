# üìä Let Claude fetch CloudWatch metrics for monitoring
#
# What Claude can do with this:
# - "Show me CPU usage for the last 24 hours"
# - "Get memory metrics for our EC2 instances"
# - "Display error rate trends from yesterday"
# - "Fetch database connection metrics for this week"
#
# Prerequisites:
# ‚úèÔ∏è Configure AWS credentials in your environment
# ‚úèÔ∏è Set up CloudWatch permissions for metrics access
# ‚úèÔ∏è Update metric namespace and names to match your resources

query GetCloudWatchMetrics(
  $namespace: String!
  $metricName: String!
  $startTime: String!
  $endTime: String!
) {
  """
  Retrieves CloudWatch metrics for system monitoring and analysis.
  
  Claude will use this when you ask about system performance,
  resource usage, error rates, or operational metrics.
  """
  getMetrics(
    namespace: $namespace
    metricName: $metricName
    startTime: $startTime
    endTime: $endTime
  ) @connect(
    source: "aws"
    http: {
      POST: "https://monitoring.us-east-1.amazonaws.com/"
      headers: [{
        name: "Content-Type"
        value: "application/x-amz-json-1.1"
      }, {
        name: "X-Amz-Target"
        value: "GraniteServiceVersion20100801.GetMetricStatistics"
      }]
    }
    selection: """
      Namespace: {$args.namespace}
      MetricName: {$args.metricName}
      StartTime: {$args.startTime}
      EndTime: {$args.endTime}
      Period: 300
      Statistics: ["Average", "Maximum", "Minimum"]
    """
  ) {
    datapoints {
      timestamp       # Time when the metric was recorded
      average         # Average value during the period
      maximum         # Maximum value during the period
      minimum         # Minimum value during the period
      unit           # Unit of measurement (Bytes, Percent, etc.)
    }
    # ‚úèÔ∏è Add more fields from CloudWatch response: sum, sampleCount, etc.
    # ‚úèÔ∏è Update the selection mapping above to include additional statistics
  }
}