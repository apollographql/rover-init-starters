# üé£ Let Claude trigger webhook events in your system
#
# What Claude can do with this:
# - "Send a notification webhook when user signs up"
# - "Trigger a deployment webhook for the production environment"
# - "Fire a webhook to Slack when an order is placed"
# - "Send webhook event with customer data to integration service"
#
# To customize:
# ‚úèÔ∏è Replace with your webhook endpoint URL
# ‚úèÔ∏è Modify the event payload structure to match your webhook format
# ‚úèÔ∏è Add webhook authentication (secret header, signature, etc.)

mutation TriggerWebhook($eventType: String!, $payload: JSON!) {
  """
  Triggers a webhook event in your system.
  
  Claude will use this when you ask to send notifications,
  trigger integrations, or fire webhook events.
  """
  triggerWebhook(eventType: $eventType, payload: $payload) @connect(
    http: {
      POST: "https://webhooks.example.com/trigger"
      headers: [{
        name: "Content-Type"
        value: "application/json"
      }, {
        name: "X-Webhook-Secret"
        value: "YOUR_WEBHOOK_SECRET"  # ‚úèÔ∏è Replace with your webhook secret
      }]
    }
    selection: """
      event: {$args.eventType}
      data: {$args.payload}
      timestamp: {$now}
    """
  ) {
    success        # Whether the webhook was triggered successfully
    eventId        # Unique identifier for this webhook event
    message        # Response message from the webhook endpoint
    # ‚úèÔ∏è Add more fields from your webhook response: deliveryId, retryCount, etc.
    # ‚úèÔ∏è Update the selection mapping above to include additional fields
  }
}