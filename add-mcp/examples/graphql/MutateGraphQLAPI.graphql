# ✏️ Let Claude update data in your GraphQL API
#
# What Claude can do with this:
# - "Update user 123's email to newemail@example.com"
# - "Change the name for user John to John Smith"
# - "Update user preferences for dark mode"
# - "Modify user profile with new phone number"
#
# To customize:
# ✏️ Replace with your GraphQL endpoint URL
# ✏️ Update mutation fields to match your schema
# ✏️ Configure proper authentication for mutations

mutation UpdateUserProfile($userId: ID!, $updates: UserProfileInput!) {
  """
  Updates user profile data in your GraphQL API.
  
  Claude will use this when you ask to update, change, or modify
  user information in your system.
  """
  updateUser(id: $userId, input: $updates) @connect(
    http: {
      POST: "https://api.example.com/graphql"  # ✏️ Replace with your GraphQL endpoint
      headers: [{
        name: "Content-Type"
        value: "application/json"
      }, {
        name: "Authorization"
        value: "Bearer YOUR_API_KEY"  # ✏️ Replace with your API key
      }]
    }
    selection: """
      query: "mutation($userId: ID!, $updates: UserProfileInput!) { updateUser(id: $userId, input: $updates) { id name email updatedAt } }"
      variables: {
        userId: {$args.userId}
        updates: {$args.updates}
      }
    """
  ) {
    id           # Updated user's unique identifier
    name         # Updated user's full name
    email        # Updated user's email address
    updatedAt    # Timestamp of the last update
    # ✏️ Add more fields from your mutation response: version, status, etc.
    # ✏️ Update the GraphQL mutation in the selection mapping above to include additional fields
  }
}