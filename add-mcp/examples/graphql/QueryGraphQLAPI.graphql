# üë§ Let Claude work with your GraphQL user API
#
# What Claude can do with this:
# - "Show me profile for user 12345"
# - "Get contact info for John Smith" 
# - "When did user sarah@example.com sign up?"
# - "Find users who joined this month"
#
# To customize for your API:
# ‚úèÔ∏è Replace YOUR_GRAPHQL_ENDPOINT with your GraphQL API URL
# ‚úèÔ∏è Change field names to match your user schema
# ‚úèÔ∏è Update authentication to match your API requirements

query GetUserProfile($userId: ID!) {
  """
  Let Claude fetch and display user profile information from your GraphQL API.
  
  Claude will use this when you ask about specific users,
  their details, activity, or account information.
  """
  user(id: $userId) @connect(
    http: { 
      POST: "https://api.example.com/graphql"  # ‚úèÔ∏è Replace with your GraphQL endpoint
      headers: [{
        name: "Content-Type"
        value: "application/json"
      }, {
        name: "Authorization"
        value: "Bearer YOUR_API_KEY"  # ‚úèÔ∏è Replace with your authentication
      }]
    }
    selection: """
      query: "query($userId: ID!) { user(id: $userId) { id name email avatar profileUrl createdAt } }"
      variables: { userId: {$args.userId} }
    """
  ) {
    id            # User unique identifier
    name          # User's full name
    email         # User's email address
    avatar        # Profile picture URL
    profileUrl    # Public profile link
    createdAt     # Account creation timestamp
    # ‚úèÔ∏è Add more fields from your user schema: role, lastLogin, preferences, etc.
    # ‚úèÔ∏è Update the GraphQL query in the selection mapping above to include additional fields
  }
}