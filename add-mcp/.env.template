# =============================================================================
# APOLLO MCP SERVER ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
#
# Copy this file to .env and fill in your actual values
# cp .env.template .env
#
# This file contains environment variables needed to configure the Apollo MCP
# Server to connect to your GraphQL API and provide it as tools for AI assistants.
#
# SECURITY WARNING: Never commit .env files to version control!
# Add .env to your .gitignore file.
#
# =============================================================================

# =============================================================================
# PROJECT CONFIGURATION
# =============================================================================

# Your project name (used in MCP server identification)
PROJECT_NAME="{{PROJECT_NAME}}"

# Your project version (for logging and monitoring)
PROJECT_VERSION="1.0.0"

# Environment (development, staging, production)
NODE_ENV="development"

# =============================================================================
# GRAPHQL ENDPOINT CONFIGURATION
# =============================================================================

# Your GraphQL API endpoint URL
# This is where your GraphQL server is running
# Examples:
#   Local development: http://localhost:4000/graphql
#   Hosted service: https://api.example.com/graphql
#   Apollo Server: https://studio.apollographql.com/public/your-graph/explorer
GRAPHQL_ENDPOINT="{{GRAPHQL_ENDPOINT}}"

# Alternative endpoints for different environments
GRAPHQL_ENDPOINT_LOCAL="http://localhost:4000/graphql"
GRAPHQL_ENDPOINT_STAGING="https://staging-api.{{PROJECT_NAME}}.com/graphql"
GRAPHQL_ENDPOINT_PRODUCTION="https://api.{{PROJECT_NAME}}.com/graphql"

# =============================================================================
# APOLLO STUDIO CONFIGURATION
# =============================================================================

# Your Apollo Studio API key
# Get this from: https://studio.apollographql.com/user-settings/api-keys
# This key is used for:
# - Schema introspection (if your endpoint requires authentication)
# - Metrics and monitoring
# - Studio integration features
APOLLO_KEY="service:{{PROJECT_NAME}}:YOUR_API_KEY_HERE"

# Your Apollo Graph Reference (Graph ID@Variant)
# Format: your-graph-id@current
# Example: my-supergraph@production
# Get this from Apollo Studio > Your Graph > Settings
APOLLO_GRAPH_REF="{{PROJECT_NAME}}@current"

# Apollo Studio URL (usually don't need to change this)
APOLLO_STUDIO_URL="https://studio.apollographql.com"

# Schema registry URL (for custom Apollo installations)
# APOLLO_SCHEMA_REGISTRY_URL="https://your-custom-apollo-registry.com"

# =============================================================================
# MCP SERVER CONFIGURATION
# =============================================================================

# Port where the MCP server will listen for connections
# AI assistants (like Claude Desktop) will connect to this port
MCP_PORT=5000

# Port where your GraphQL server is running
# This is used for health checks and direct GraphQL communication
GRAPHQL_PORT=4000

# Directory containing your GraphQL tool files
# Each .graphql file in this directory becomes an MCP tool
MCP_TOOLS_DIR="./tools"

# MCP configuration file to use
# Options: .apollo/mcp.local.yaml, .apollo/mcp.staging.yaml
MCP_CONFIG_FILE=".apollo/mcp.local.yaml"

# =============================================================================
# AUTHENTICATION AND AUTHORIZATION
# =============================================================================

# If your GraphQL endpoint requires authentication, configure it here

# Bearer token authentication
# AUTH_TOKEN="your-bearer-token-here"

# API key authentication (different from Apollo API key)
# API_KEY="your-api-key-here"

# Basic authentication
# BASIC_AUTH_USERNAME="your-username"
# BASIC_AUTH_PASSWORD="your-password"

# Custom authentication headers
# AUTH_HEADER_NAME="X-Custom-Auth"
# AUTH_HEADER_VALUE="your-custom-auth-value"

# JWT token (if using JWT authentication)
# JWT_TOKEN="your-jwt-token-here"
# JWT_SECRET="your-jwt-secret-for-verification"

# OAuth 2.0 configuration (if using OAuth)
# OAUTH_CLIENT_ID="your-oauth-client-id"
# OAUTH_CLIENT_SECRET="your-oauth-client-secret"  
# OAUTH_TOKEN_URL="https://auth.example.com/oauth/token"
# OAUTH_SCOPE="graphql:read graphql:write"

# =============================================================================
# CORS AND SECURITY CONFIGURATION
# =============================================================================

# Allowed origins for CORS (comma-separated)
# Add your frontend URLs here
ALLOWED_ORIGINS="http://localhost:3000,http://localhost:4000,https://{{PROJECT_NAME}}.vercel.app"

# API rate limiting
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST_SIZE=10

# Query complexity limits
MAX_QUERY_COMPLEXITY=1000
MAX_QUERY_DEPTH=15

# Request size limits (in bytes)
MAX_REQUEST_SIZE=10485760  # 10MB
MAX_QUERY_SIZE=10000      # 10KB

# =============================================================================
# LOGGING AND MONITORING CONFIGURATION
# =============================================================================

# Logging level (debug, info, warn, error)
LOG_LEVEL="debug"

# Log format (json, text)
LOG_FORMAT="json"

# Enable detailed operation logging
LOG_OPERATIONS="true"

# Enable performance timing logs
LOG_TIMING="true"

# External logging service configuration (optional)
# LOGGING_ENDPOINT="https://logs.example.com/api/v1/logs"
# LOGGING_API_KEY="your-logging-api-key"

# Metrics and monitoring (optional)
# METRICS_ENABLED="true"
# METRICS_ENDPOINT="https://metrics.example.com/api/v1/metrics"
# PROMETHEUS_ENABLED="false"

# =============================================================================
# PERFORMANCE AND CACHING CONFIGURATION
# =============================================================================

# Connection pool settings
MAX_CONNECTIONS=10
IDLE_TIMEOUT=30000        # 30 seconds
CONNECTION_TIMEOUT=5000   # 5 seconds

# Response caching (be careful with mutations!)
CACHE_ENABLED="false"     # Set to "true" to enable caching
CACHE_TTL=300            # 5 minutes
CACHE_QUERIES_ONLY="true" # Only cache queries, not mutations

# Request batching
BATCHING_ENABLED="false"
MAX_BATCH_SIZE=10

# Introspection caching
INTROSPECTION_CACHE_TTL=900  # 15 minutes

# =============================================================================
# DEVELOPMENT AND DEBUGGING
# =============================================================================

# Enable development mode features
DEVELOPMENT_MODE="true"

# Enable hot reload for tool files
HOT_RELOAD="true"

# Enable GraphQL Playground
PLAYGROUND_ENABLED="true"

# Enable detailed error messages (disable in production)
EXPOSE_ERROR_DETAILS="true"

# Enable MCP Inspector interface
INSPECTOR_ENABLED="true"

# Debug specific components (comma-separated)
# Options: server, graphql, tools, auth, cache, metrics
DEBUG_COMPONENTS="server,tools"

# =============================================================================
# DOCKER AND DEPLOYMENT CONFIGURATION
# =============================================================================

# Container timezone
TZ="UTC"

# Health check settings
HEALTH_CHECK_ENABLED="true"
HEALTH_CHECK_INTERVAL="30s"
HEALTH_CHECK_TIMEOUT="10s"

# Graceful shutdown timeout
SHUTDOWN_TIMEOUT=10000  # 10 seconds

# Process management
NODE_OPTIONS="--max-old-space-size=2048"

# =============================================================================
# THIRD-PARTY INTEGRATIONS
# =============================================================================

# Claude Desktop integration
CLAUDE_DESKTOP_CONFIG_PATH="./claude-desktop-config.json"

# VS Code integration
VSCODE_SETTINGS_PATH="./.vscode/settings.json"

# External webhook endpoints (optional)
# WEBHOOK_ON_TOOL_EXECUTE="https://api.example.com/webhooks/tool-executed"
# WEBHOOK_ON_ERROR="https://api.example.com/webhooks/error"
# WEBHOOK_SECRET="your-webhook-secret"

# =============================================================================
# CUSTOM VARIABLES FOR YOUR PROJECT
# =============================================================================

# Add any custom environment variables your GraphQL API needs here
# These will be available in your MCP tools and configuration

# Example database configuration (if needed)
# DATABASE_URL="postgresql://user:password@localhost:5432/{{PROJECT_NAME}}"
# REDIS_URL="redis://localhost:6379"

# Example external API keys (if your GraphQL API calls other services)
# STRIPE_API_KEY="sk_test_your_stripe_key"
# SENDGRID_API_KEY="SG.your_sendgrid_key"
# AWS_ACCESS_KEY_ID="your_aws_access_key"
# AWS_SECRET_ACCESS_KEY="your_aws_secret_key"

# Example feature flags
# FEATURE_ADVANCED_TOOLS="true"
# FEATURE_ANALYTICS="false"

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# 1. Copy this file to .env:
#    cp .env.template .env
#
# 2. Fill in your actual values (replace {{PLACEHOLDERS}})
#
# 3. Ensure .env is in your .gitignore:
#    echo ".env" >> .gitignore
#
# 4. Start the MCP server:
#    docker build -f mcp.Dockerfile -t {{PROJECT_NAME}}-mcp .
#    docker run -p 5000:5000 --env-file .env {{PROJECT_NAME}}-mcp
#
# 5. Test the server:
#    npx @mcp/inspector --port 5000
#
# 6. Configure Claude Desktop with the generated claude-desktop-config.json
#
# =============================================================================

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =============================================================================
#
# For different environments, you can create separate .env files:
#
# .env.local       - Local development (this file)
# .env.staging     - Staging environment  
# .env.production  - Production environment
#
# Then use them with:
# docker run --env-file .env.staging ...
#
# Or in Docker Compose:
# env_file:
#   - .env.staging
#
# =============================================================================